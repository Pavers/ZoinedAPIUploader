{"version":3,"sources":["../../../lib/validation/organisations.js"],"names":["validateOrganisations","data","supplierData","JSON","parse","result","finalObject","request","map","row","Promise","resolve","reject","organisation_id","errorID","errorField","errorReason","organisation_name","street_address","city","post_code","state","country","area","latitude","isNaN","longitude","channel","organisation_type","custom_dimension_1","custom_dimension_2","custom_dimension_3","custom_dimension_4","custom_dimension_5","source_system","push","all","module","exports"],"mappings":"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","file":"organisations.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst validateOrganisations = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.organisation_id string required\n       * @param row.organisation_name string required\n       * @param row.street_address string\n       * @param row.city string\n       * @param row.post_code string\n       * @param row.state string\n       * @param row.country string\n       * @param row.area string\n       * @param row.latitude number\n       * @param row.longitude number\n       * @param row.channel number\n       * @param row.organisation_type number\n       * @param row.custom_dimension_1 string\n       * @param row.custom_dimension_2 string\n       * @param row.custom_dimension_3 string\n       * @param row.custom_dimension_4 string\n       * @param row.custom_dimension_5 string\n       * @param row.source_system string\n       */\n\n\n      if (!row.organisation_id) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'organisation_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.organisation_id !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'organisation_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (!row.organisation_name) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'organisation_name';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.organisation_name !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'organisation_name';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (row.street_address) {\n        if (typeof row.street_address !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'street_address';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.street_address = '';\n      }\n\n      if (row.city) {\n        if (typeof row.city !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'city';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.city = '';\n      }\n\n      if (row.post_code) {\n        if (typeof row.post_code !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'post_code';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.post_code = '';\n      }\n\n      if (row.state) {\n        if (typeof row.state !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'state';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.state = '';\n      }\n\n      if (row.country) {\n        if (typeof row.country !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'country';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.country = '';\n      }\n\n      if (row.area) {\n        if (typeof row.area !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'area';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.area = '';\n      }\n\n\n      if (row.latitude) {\n        if (isNaN(row.latitude)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'latitude';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      } else {\n        row.latitude = 0;\n      }\n\n      if (row.longitude) {\n        if (isNaN(row.longitude)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'longitude';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      } else {\n        row.longitude = 0;\n      }\n\n      if (row.channel) {\n        if (typeof row.channel !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'channel';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.channel = '';\n      }\n\n\n      if (row.organisation_type) {\n        if (typeof row.organisation_type !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'organisation_type';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.organisation_type = '';\n      }\n\n\n      if (row.custom_dimension_1) {\n        if (typeof row.custom_dimension_1 !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'custom_dimension_1';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.custom_dimension_1 = '';\n      }\n\n      if (row.custom_dimension_2) {\n        if (typeof row.custom_dimension_2 !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'custom_dimension_2';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.custom_dimension_2 = '';\n      }\n\n      if (row.custom_dimension_3) {\n        if (typeof row.custom_dimension_3 !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'custom_dimension_3';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.custom_dimension_3 = '';\n      }\n\n\n      if (row.custom_dimension_4) {\n        if (typeof row.custom_dimension_4 !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'custom_dimension_4';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.custom_dimension_4 = '';\n      }\n\n      if (row.custom_dimension_5) {\n        if (typeof row.custom_dimension_5 !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'custom_dimension_5';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.custom_dimension_5 = '';\n      }\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n\n      finalObject.push(row);\n      resolve(row);\n    });\n  });\n\n  return await Promise.all(request);\n\n};\n\nmodule.exports = {\n  validateOrganisations\n};\n"]}