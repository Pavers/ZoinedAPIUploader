{"version":3,"sources":["../../../lib/validation/inventorytransactions.js"],"names":["validateInventoryTransactions","data","supplierData","JSON","parse","result","finalObject","dateRegex","request","map","row","Promise","resolve","reject","organisation_id","errorID","errorField","errorReason","movement_date","match","product_id","quantity","isNaN","movement_type","unit_purchase_price","unit_purchase_price_wo_vat","currency","source_system","push","all","module","exports"],"mappings":"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","file":"inventorytransactions.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst validateInventoryTransactions = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n\n  const dateRegex = '/^\\d{4}-\\d{2}-\\d{2}$/';\n\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.organisation_id string required\n       * @param row.movement_date string required (yyyy-mm-dd)\n       * @param row.product_id string  required\n       * @param row.quantity number  required\n       * @param row.movement_type string (purchase/waste)\n       * @param row.unit_purchase_price_wo_vat number\n       * @param row.currency string\n       * @param row.source_system string\n       */\n\n\n      if (!row.organisation_id) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'organisation_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.organisation_id !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'organisation_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (!row.movement_date) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'movement_date';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n        if (typeof row.movement_date !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'movement_date';\n          result.errorReason = 'Not a String';\n          reject(result);\n        } else if (!row.movement_date.match(dateRegex)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'movement_date';\n          result.errorReason = 'Not in correct format of yyyy-mm-dd';\n          reject(result);\n        }\n      }\n\n      if (!row.product_id) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'product_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.product_id !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'product_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (!row.quantity) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'quantity';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (isNaN(row.quantity)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'quantity';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      }\n\n\n      if (!row.movement_type) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'movement_type';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n        if (row.movement_type !== 'waste' || row.movement_type !== 'purchase') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'movement_type';\n          result.errorReason = 'Only accepts waste or purchase';\n          reject(result);\n        }\n      }\n\n\n      if (row.unit_purchase_price) {\n        if (isNaN(row.unit_purchase_price)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'unit_purchase_price';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      } else {\n        row.unit_purchase_price = 0;\n      }\n\n      if (row.unit_purchase_price_wo_vat) {\n        if (isNaN(row.unit_purchase_price_wo_vat)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'unit_purchase_price_wo_vat';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      } else {\n        row.unit_purchase_price_wo_vat = 0;\n      }\n\n      if (row.currency) {\n        if (typeof row.currency !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'currency';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.currency = '';\n      }\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n\n      finalObject.push(row);\n      resolve(row);\n    });\n  });\n\n  return await Promise.all(request);\n};\n\nmodule.exports = {\n  validateInventoryTransactions\n};\n\n"]}