{"version":3,"sources":["../../../lib/validation/salesperson.js"],"names":["validateSalesPerson","data","supplierData","JSON","parse","result","finalObject","request","map","row","Promise","resolve","reject","salesperson_id","errorID","errorField","errorReason","salesperson_name","salesperson_email","salesperson_phone","employee_id","source_system","push","all","module","exports"],"mappings":"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","file":"salesperson.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst validateSalesPerson = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.salesperson_id string required\n       * @param row.salesperson_name string required\n       * @param row.salesperson_email string\n       * @param row.salesperson_phone string\n       * @param row.salesperson_employee_id\n       * @param row.source_system string\n       */\n\n      if (!row.salesperson_id) {\n        result.errorID = row.salesperson_id;\n        result.errorField = 'salesperson_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.salesperson_id !== 'string') {\n          result.errorID = row.salesperson_id;\n          result.errorField = 'salesperson_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (!row.salesperson_name) {\n        result.errorID = row.salesperson_id;\n        result.errorField = 'salesperson_name';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.salesperson_name !== 'string') {\n          result.errorID = row.salesperson_id;\n          result.errorField = 'salesperson_name';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (row.salesperson_email) {\n        if (typeof row.salesperson_email !== 'string') {\n          result.errorID = row.salesperson_id;\n          result.errorField = 'salesperson_email';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.salesperson_email = '';\n      }\n\n      if (row.salesperson_phone) {\n        if (typeof row.salesperson_phone !== 'string') {\n          result.errorID = row.salesperson_id;\n          result.errorField = 'salesperson_phone';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.salesperson_phone = '';\n      }\n\n      if (row.employee_id) {\n        if (typeof row.employee_id !== 'string') {\n          result.errorID = row.salesperson_id;\n          result.errorField = 'employee_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.salesperson_id;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n      finalObject.push(row);\n      resolve(row);\n    });\n  });\n\n  return await Promise.all(request);\n};\n\nmodule.exports = {\n  validateSalesPerson\n};\n"]}