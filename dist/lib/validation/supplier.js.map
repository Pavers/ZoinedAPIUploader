{"version":3,"sources":["../../../lib/validation/supplier.js"],"names":["validateSupplier","data","supplierData","JSON","parse","result","finalObject","request","map","row","Promise","resolve","reject","supplier_id","errorID","errorField","errorReason","supplier_name","supplier_email","supplier_phone","supplier_address","supplier_city","supplier_zipcode","supplier_country","source_system","push","all","module","exports"],"mappings":"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","file":"supplier.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst validateSupplier = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.supplier_id string required\n       * @param row.supplier_name string required\n       * @param row.supplier_email string\n       * @param row.supplier_phone string\n       * @param row.supplier_address string\n       * @param row.supplier_city string\n       * @param row.supplier_zipcode string\n       * @param row.supplier_country string\n       * @param row.source_system string\n       */\n\n      if (!row.supplier_id) {\n        result.errorID = '';\n        result.errorField = 'supplier_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.supplier_id !== 'string') {\n          result.errorID = '';\n          result.errorField = 'supplier_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (!row.supplier_name) {\n        result.errorID = row.supplier_id;\n        result.errorField = 'supplier_name';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.supplier_name !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'supplier_name';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (row.supplier_email) {\n        if (typeof row.supplier_email !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'supplier_email';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.supplier_email = '';\n      }\n\n      if (row.supplier_phone) {\n        if (typeof row.supplier_phone !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'supplier_phone';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.supplier_phone = '';\n      }\n\n      if (row.supplier_address) {\n        if (typeof row.supplier_address !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'supplier_address';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.supplier_address = '';\n      }\n\n      if (row.supplier_city) {\n        if (typeof row.supplier_city !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'supplier_city';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.supplier_city = '';\n      }\n\n      if (row.supplier_zipcode) {\n        if (typeof row.supplier_zipcode !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'supplier_zipcode';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.supplier_zipcode = '';\n      }\n\n      if (row.supplier_country) {\n        if (typeof row.supplier_country !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'supplier_country';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.supplier_country = '';\n      }\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n      finalObject.push(row);\n      resolve(row);\n    });\n  });\n\n  return await Promise.all(request);\n\n\n};\n\nmodule.exports = {\n  validateSupplier: validateSupplier\n};\n"]}