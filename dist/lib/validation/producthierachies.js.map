{"version":3,"sources":["../../../lib/validation/producthierachies.js"],"names":["validateProductHierachies","data","supplierData","JSON","parse","result","finalObject","request","map","row","Promise","resolve","reject","category_id","errorID","errorField","errorReason","category_name","parent_id","currency","source_system","push","all","module","exports"],"mappings":"AAAA;AACA;;AAEA;;;;;;;;AAKA,IAAMA;AAAA,qEAA4B,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1BC,wBAF0B,GAEXC,KAAKC,KAAL,CAAWH,IAAX,CAFW;AAG5BI,kBAH4B,GAGnB,EAHmB;AAI5BC,uBAJ4B,GAId,EAJc;AAM5BC,mBAN4B,GAMlBL,aAAaM,GAAb,CAAiB,UAACC,GAAD,EAAS;AACtC,qBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC;;;;;;;;AASA,oBAAI,CAACH,IAAII,WAAT,EAAsB;AACpBR,yBAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,yBAAOU,UAAP,GAAoB,aAApB;AACAV,yBAAOW,WAAP,GAAqB,2BAArB;AACAJ,yBAAOP,MAAP;AACD,iBALD,MAKO;;AAEL,sBAAI,OAAOI,IAAII,WAAX,KAA2B,QAA/B,EAAyC;AACvCR,2BAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,2BAAOU,UAAP,GAAoB,aAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF;;AAGD,oBAAI,CAACI,IAAIQ,aAAT,EAAwB;AACtBZ,yBAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,yBAAOU,UAAP,GAAoB,eAApB;AACAV,yBAAOW,WAAP,GAAqB,2BAArB;AACAJ,yBAAOP,MAAP;AACD,iBALD,MAKO;;AAEL,sBAAI,OAAOI,IAAIQ,aAAX,KAA6B,QAAjC,EAA2C;AACzCZ,2BAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,2BAAOU,UAAP,GAAoB,eAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF;;AAED,oBAAII,IAAIS,SAAR,EAAmB;AACjB,sBAAI,OAAOT,IAAIU,QAAX,KAAwB,QAA5B,EAAsC;AACpCd,2BAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,2BAAOU,UAAP,GAAoB,WAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF,iBAPD,MAOO;AACLI,sBAAIS,SAAJ,GAAgB,EAAhB;AACD;;AAED,oBAAIT,IAAIW,aAAR,EAAuB;AACrB,sBAAI,OAAOX,IAAIW,aAAX,KAA6B,QAAjC,EAA2C;AACzCf,2BAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,2BAAOU,UAAP,GAAoB,eAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF,iBAPD,MAOO;AACLI,sBAAIW,aAAJ,GAAoB,EAApB;AACD;;AAEDd,4BAAYe,IAAZ,CAAiBZ,GAAjB;AACAE,wBAAQF,GAAR;AACD,eAlEM,CAAP;AAmED,aApEa,CANkB;AAAA;AAAA,mBA4EnBC,QAAQY,GAAR,CAAYf,OAAZ,CA5EmB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA+EAgB,OAAOC,OAAP,GAAiB;AACfxB;AADe,CAAjB","file":"producthierachies.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst validateProductHierachies = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.category_id string required\n       * @param row.category_name string required\n       * @param row.parent_id string\n       * @param row.source_system string\n       */\n\n\n      if (!row.category_id) {\n        result.errorID = row.category_id;\n        result.errorField = 'category_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.category_id !== 'string') {\n          result.errorID = row.category_id;\n          result.errorField = 'category_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (!row.category_name) {\n        result.errorID = row.category_id;\n        result.errorField = 'category_name';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.category_name !== 'string') {\n          result.errorID = row.category_id;\n          result.errorField = 'category_name';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (row.parent_id) {\n        if (typeof row.currency !== 'string') {\n          result.errorID = row.category_id;\n          result.errorField = 'parent_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.parent_id = '';\n      }\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.category_id;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n\n      finalObject.push(row);\n      resolve(row);\n    });\n  });\n\n  return await Promise.all(request);\n};\n\nmodule.exports = {\n  validateProductHierachies\n};\n\n"]}