{"version":3,"sources":["../../../lib/validation/campaignproducts.js"],"names":["validateCampaignProducts","data","supplierData","JSON","parse","result","finalObject","request","map","row","Promise","resolve","reject","campaign_id","errorID","errorField","errorReason","product_id","category_id","organisation_id","source_system","supplier_id","push","all","module","exports"],"mappings":"AAAA;AACA;;AAEA;;;;;;;;AAKA,IAAMA;AAAA,qEAA2B,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzBC,wBAFyB,GAEVC,KAAKC,KAAL,CAAWH,IAAX,CAFU;AAG3BI,kBAH2B,GAGlB,EAHkB;AAI3BC,uBAJ2B,GAIb,EAJa;AAM3BC,mBAN2B,GAMjBL,aAAaM,GAAb,CAAiB,UAACC,GAAD,EAAS;AACtC,qBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC;;;;;;;;AAQA,oBAAI,CAACH,IAAII,WAAT,EAAsB;AACpBR,yBAAOS,OAAP,GAAiB,EAAjB;AACAT,yBAAOU,UAAP,GAAoB,aAApB;AACAV,yBAAOW,WAAP,GAAqB,2BAArB;AACAJ,yBAAOP,MAAP;AACD,iBALD,MAKO;;AAEL,sBAAI,OAAOI,IAAII,WAAX,KAA2B,QAA/B,EAAyC;AACvCR,2BAAOS,OAAP,GAAiB,EAAjB;AACAT,2BAAOU,UAAP,GAAoB,aAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF;;AAGD,oBAAI,CAACI,IAAIQ,UAAT,EAAqB;AACnBZ,yBAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,yBAAOU,UAAP,GAAoB,YAApB;AACAV,yBAAOW,WAAP,GAAqB,2BAArB;AACAJ,yBAAOP,MAAP;AACD,iBALD,MAKO;;AAEL,sBAAI,OAAOI,IAAIQ,UAAX,KAA0B,QAA9B,EAAwC;AACtCZ,2BAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,2BAAOU,UAAP,GAAoB,YAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF;;AAGD,oBAAII,IAAIS,WAAR,EAAqB;AACnB,sBAAI,OAAOT,IAAIU,eAAX,KAA+B,QAAnC,EAA6C;AAC3Cd,2BAAOS,OAAP,GAAiBL,IAAII,WAArB;AACAR,2BAAOU,UAAP,GAAoB,aAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF,iBAPD,MAOO;AACLI,sBAAIS,WAAJ,GAAkB,EAAlB;AACD;;AAED,oBAAIT,IAAIW,aAAR,EAAuB;AACrB,sBAAI,OAAOX,IAAIW,aAAX,KAA6B,QAAjC,EAA2C;AACzCf,2BAAOS,OAAP,GAAiBL,IAAIY,WAArB;AACAhB,2BAAOU,UAAP,GAAoB,eAApB;AACAV,2BAAOW,WAAP,GAAqB,cAArB;AACAJ,2BAAOP,MAAP;AACD;AACF,iBAPD,MAOO;AACLI,sBAAIW,aAAJ,GAAoB,EAApB;AACD;;AAGDd,4BAAYgB,IAAZ,CAAiBb,GAAjB;AACAE,wBAAQF,GAAR;AACD,eAnEM,CAAP;AAoED,aArEa,CANiB;AAAA;AAAA,mBA6ElBC,QAAQa,GAAR,CAAYhB,OAAZ,CA7EkB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAiFAiB,OAAOC,OAAP,GAAiB;AACfzB;AADe,CAAjB","file":"campaignproducts.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst validateCampaignProducts = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.campaign_id string required\n       * @param row.category_id string\n       * @param row.product_id string required\n       * @param row.source_system string\n       */\n\n      if (!row.campaign_id) {\n        result.errorID = '';\n        result.errorField = 'campaign_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.campaign_id !== 'string') {\n          result.errorID = '';\n          result.errorField = 'campaign_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (!row.product_id) {\n        result.errorID = row.campaign_id;\n        result.errorField = 'product_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.product_id !== 'string') {\n          result.errorID = row.campaign_id;\n          result.errorField = 'product_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (row.category_id) {\n        if (typeof row.organisation_id !== 'string') {\n          result.errorID = row.campaign_id;\n          result.errorField = 'category_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.category_id = '';\n      }\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.supplier_id;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n\n\n      finalObject.push(row);\n      resolve(row);\n    });\n  });\n\n  return await Promise.all(request);\n\n};\n\nmodule.exports = {\n  validateCampaignProducts\n};\n\n"]}