{"version":3,"sources":["../../../lib/validation/inventorysnapshots.js"],"names":["validateInventorySnapshots","data","supplierData","JSON","parse","result","finalObject","dateRegex","timeRegex","request","map","row","Promise","resolve","reject","organisation_id","errorID","errorField","errorReason","snapshot_date","match","snapshot_time","product_id","quantity","isNaN","unit_purchase_price","unit_purchase_price_wo_vat","currency","source_system","push","all","module","exports"],"mappings":"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","file":"inventorysnapshots.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst validateInventorySnapshots = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n  let dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  let timeRegex = /^\\d{2}:\\d{2}:\\d{2}$/;\n\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.organisation_id string required\n       * @param row.snapshot_date string required (yyyy-mm-dd)\n       * @param row.snapshot_time string  (hh:mm:ss)\n       * @param row.product_id string  required\n       * @param row.quantity number  required\n       * @param row.unit_purchase_price number\n       * @param row.unit_purchase_price_wo_vat number\n       * @param row.currency string\n       * @param row.source_system string\n       */\n\n\n      if (!row.organisation_id) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'organisation_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.organisation_id !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'organisation_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n\n      if (!row.snapshot_date) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'snapshot_date';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n        if (typeof row.snapshot_date !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'snapshot_date';\n          result.errorReason = 'Not a String';\n          reject(result);\n        } else if (!row.snapshot_date.match(dateRegex)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'snapshot_date';\n          result.errorReason = 'Not in correct format of yyyy-mm-dd';\n          reject(result);\n        }\n      }\n\n      if (row.snapshot_time) {\n        if (!row.snapshot_time.match(timeRegex)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'snapshot_time';\n          result.errorReason = 'Not in correct format of HH:mm:ss';\n          reject(result);\n        }\n      }\n\n      else {\n        result.errorID = row.organisation_id;\n        result.errorField = 'snapshot_time';\n        result.errorReason = 'Requires a Time';\n        reject(result);\n      }\n\n      if (!row.product_id) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'product_id';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.product_id !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'product_id';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (!row.quantity) {\n        result.errorID = row.organisation_id;\n        result.errorField = 'quantity';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (isNaN(row.quantity)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'quantity';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      }\n\n\n      if (row.unit_purchase_price) {\n        if (isNaN(row.unit_purchase_price)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'unit_purchase_price';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      } else {\n        row.unit_purchase_price = 0;\n      }\n\n      if (row.unit_purchase_price_wo_vat) {\n        if (isNaN(row.unit_purchase_price_wo_vat)) {\n          result.errorID = row.organisation_id;\n          result.errorField = 'unit_purchase_price_wo_vat';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      } else {\n        row.unit_purchase_price_wo_vat = 0;\n      }\n\n      if (row.currency) {\n        if (typeof row.currency !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'currency';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.currency = '';\n      }\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.organisation_id;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n\n      finalObject.push(row);\n      resolve(row);\n    });\n  });\n\n  return await Promise.all(request);\n};\n\nmodule.exports = {\n  validateInventorySnapshots\n};\n\n"]}