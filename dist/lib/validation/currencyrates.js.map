{"version":3,"sources":["../../../lib/validation/currencyrates.js"],"names":["currencyValidation","data","supplierData","JSON","parse","result","finalObject","dateRegex","request","map","row","Promise","resolve","reject","source_currency","errorID","errorField","errorReason","target_currency","valid_from","match","valid_to","rate","isNaN","source_system","push","all","module","exports"],"mappings":"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","file":"currencyrates.js","sourcesContent":["/* eslint-disable valid-jsdoc */\n'use strict';\n\n/**\n * @author Dave Grix\n * @param data string\n * @return array\n */\nconst currencyValidation = async(data) => {\n\n  const supplierData = JSON.parse(data);\n  let result = {};\n  let finalObject = [];\n\n\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n\n  let request = supplierData.map((row) => {\n    return new Promise((resolve, reject) => {\n\n      /**\n       * @param row object\n       * @param row.source_currency string required\n       * @param row.target_currency string required\n       * @param row.valid_from string required\n       * @param row.valid_to string required\n       * @param row.rate number required\n       * @param row.source_system string\n       */\n\n\n      if (!row.source_currency) {\n        result.errorID = row.source_currency;\n        result.errorField = 'source_currency';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.source_currency !== 'string') {\n          result.errorID = row.source_currency;\n          result.errorField = 'source_currency';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (!row.target_currency) {\n        result.errorID = row.source_currency;\n        result.errorField = 'target_currency';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (typeof row.target_currency !== 'string') {\n          result.errorID = row.source_currency;\n          result.errorField = 'target_currency';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      }\n\n      if (!row.valid_from) {\n        result.errorID = row.source_currency;\n        result.errorField = 'valid_from';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n        if (typeof row.valid_from !== 'string') {\n          result.errorID = row.source_currency;\n          result.errorField = 'valid_from';\n          result.errorReason = 'Not a String';\n          reject(result);\n        } else if (!row.valid_from.match(dateRegex)) {\n          result.errorID = row.source_currency;\n          result.errorField = 'valid_from';\n          result.errorReason = 'Not in correct format of YYYY-mm-dd';\n          reject(result);\n        }\n      }\n\n\n      if (!row.valid_to) {\n        result.errorID = row.source_currency;\n        result.errorField = 'valid_to';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n        if (typeof row.valid_to !== 'string') {\n          result.errorID = row.source_currency;\n          result.errorField = 'valid_to';\n          result.errorReason = 'Not a String';\n          reject(result);\n        } else if (!row.valid_to.match(dateRegex)) {\n          result.errorID = row.source_currency;\n          result.errorField = 'valid_to';\n          result.errorReason = 'Not in correct format of YYYY-mm-dd';\n          reject(result);\n        }\n      }\n\n\n      if (!row.rate) {\n        result.errorID = row.source_currency;\n        result.errorField = 'rate';\n        result.errorReason = 'Missing Required Property';\n        reject(result);\n      } else {\n\n        if (isNaN(row.rate)) {\n          result.errorID = row.source_currency;\n          result.errorField = 'rate';\n          result.errorReason = 'Not a Number!';\n          reject(result);\n        }\n      }\n\n\n      if (row.source_system) {\n        if (typeof row.source_system !== 'string') {\n          result.errorID = row.source_currency;\n          result.errorField = 'source_system';\n          result.errorReason = 'Not a String';\n          reject(result);\n        }\n      } else {\n        row.source_system = '';\n      }\n\n      finalObject.push(row);\n      resolve(row);\n\n    });\n  });\n\n  return await Promise.all(request);\n};\n\nmodule.exports = {\n  currencyValidation\n};\n"]}